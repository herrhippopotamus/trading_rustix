// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DateReq {
    #[prost(string, tag = "1")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(enumeration = "TickerType", tag = "2")]
    pub security_type: i32,
    #[prost(bool, tag = "3")]
    pub intraday: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Date {
    #[prost(string, tag = "1")]
    pub date: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Id {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePortfolioReq {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortfolioMetas {
    #[prost(message, repeated, tag = "1")]
    pub portfolios: ::prost::alloc::vec::Vec<PortfolioMeta>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortfolioMeta {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortfolioReq {
    #[prost(string, tag = "1")]
    pub filter: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortfolioSecurities {
    #[prost(message, repeated, tag = "1")]
    pub securities: ::prost::alloc::vec::Vec<PortfolioSecurity>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortfolioSecurity {
    #[prost(string, tag = "1")]
    pub portfolio_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub security_type: i32,
    #[prost(string, tag = "3")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(double, tag = "4")]
    pub volume: f64,
    #[prost(string, tag = "5")]
    pub purchase_date: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub sell_date: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityProfitReq {
    #[prost(message, repeated, tag = "1")]
    pub securities: ::prost::alloc::vec::Vec<security_profit_req::Security>,
    #[prost(string, tag = "2")]
    pub until: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "3")]
    pub partition: i32,
}
/// Nested message and enum types in `SecurityProfitReq`.
pub mod security_profit_req {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Security {
        #[prost(string, tag = "1")]
        pub ticker: ::prost::alloc::string::String,
        #[prost(enumeration = "super::TickerType", tag = "2")]
        pub security_type: i32,
        #[prost(double, tag = "3")]
        pub volume: f64,
        #[prost(string, tag = "4")]
        pub purchase_date: ::prost::alloc::string::String,
        /// optional if already sold
        #[prost(string, optional, tag = "5")]
        pub sell_date: ::core::option::Option<::prost::alloc::string::String>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityProfits {
    #[prost(message, repeated, tag = "1")]
    pub profits: ::prost::alloc::vec::Vec<SecurityProfit>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecurityProfit {
    #[prost(string, tag = "1")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(enumeration = "TickerType", tag = "2")]
    pub security_type: i32,
    #[prost(double, tag = "3")]
    pub volume: f64,
    #[prost(string, tag = "4")]
    pub purchase_date: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub until: ::prost::alloc::string::String,
    #[prost(double, tag = "6")]
    pub purchase_price: f64,
    #[prost(double, tag = "7")]
    pub until_price: f64,
    #[prost(double, tag = "8")]
    pub profit_per_share: f64,
    #[prost(double, tag = "9")]
    pub total_profit: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CorrelReq {
    #[prost(message, repeated, tag = "1")]
    pub tickers: ::prost::alloc::vec::Vec<BasicTicker>,
    #[prost(string, tag = "2")]
    pub until: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "3")]
    pub period: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CorrelTickersReq {
    #[prost(string, tag = "1")]
    pub until: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "2")]
    pub period: i32,
    #[prost(uint32, tag = "3")]
    pub limit: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Correl {
    #[prost(message, optional, tag = "1")]
    pub ticker0: ::core::option::Option<BasicTicker>,
    #[prost(message, optional, tag = "2")]
    pub ticker1: ::core::option::Option<BasicTicker>,
    #[prost(double, tag = "3")]
    pub correl: f64,
    #[prost(string, tag = "4")]
    pub date: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "5")]
    pub period: i32,
    /// if false, then there exists no data for either one of ticker0 or ticher1
    #[prost(bool, tag = "6")]
    pub correl_exists: bool,
    #[prost(double, tag = "7")]
    pub volume0: f64,
    #[prost(double, tag = "8")]
    pub volume1: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DetailedCorrel {
    #[prost(message, optional, tag = "1")]
    pub ticker0: ::core::option::Option<Ticker>,
    #[prost(message, optional, tag = "2")]
    pub ticker1: ::core::option::Option<Ticker>,
    #[prost(double, tag = "3")]
    pub correl: f64,
    #[prost(string, tag = "4")]
    pub date: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "5")]
    pub period: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MutualCorrel {
    #[prost(message, optional, tag = "1")]
    pub ticker: ::core::option::Option<Ticker>,
    #[prost(message, repeated, tag = "2")]
    pub correlations: ::prost::alloc::vec::Vec<DetailedCorrel>,
    #[prost(double, tag = "3")]
    pub volatility: f64,
    #[prost(double, tag = "4")]
    pub stddev: f64,
    #[prost(double, tag = "5")]
    pub performance: f64,
    #[prost(double, tag = "6")]
    pub volume: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MutualCorrels {
    #[prost(message, repeated, tag = "1")]
    pub correls: ::prost::alloc::vec::Vec<MutualCorrel>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VariancesReq {
    #[prost(enumeration = "TickerType", tag = "1")]
    pub ticker_type: i32,
    #[prost(int32, tag = "2")]
    pub period: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Variances {
    #[prost(message, repeated, tag = "1")]
    pub variances: ::prost::alloc::vec::Vec<variances::Variance>,
    #[prost(enumeration = "TickerType", tag = "2")]
    pub ticker_type: i32,
    #[prost(string, tag = "4")]
    pub date: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub period: i32,
}
/// Nested message and enum types in `Variances`.
pub mod variances {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Variance {
        #[prost(string, tag = "1")]
        pub ticker: ::prost::alloc::string::String,
        #[prost(map = "string, message", tag = "2")]
        pub values: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            variance::Value,
        >,
    }
    /// Nested message and enum types in `Variance`.
    pub mod variance {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Value {
            #[prost(double, tag = "1")]
            pub variance: f64,
            #[prost(double, tag = "2")]
            pub stddev: f64,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MovementsReq {
    #[prost(enumeration = "TickerType", tag = "1")]
    pub security_type: i32,
    #[prost(string, tag = "2")]
    pub until: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "3")]
    pub period: i32,
    #[prost(enumeration = "MovementType", tag = "4")]
    pub sort_by: i32,
    #[prost(uint32, tag = "5")]
    pub limit: u32,
    #[prost(uint64, tag = "6")]
    pub min_volume: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MovementReq {
    #[prost(string, tag = "1")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(enumeration = "TickerType", tag = "2")]
    pub security_type: i32,
    #[prost(string, tag = "3")]
    pub until: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "4")]
    pub period: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Movement {
    #[prost(string, tag = "1")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "TickerType", tag = "3")]
    pub security_type: i32,
    #[prost(string, tag = "4")]
    pub date: ::prost::alloc::string::String,
    #[prost(enumeration = "Period", tag = "5")]
    pub period: i32,
    #[prost(double, tag = "6")]
    pub performance: f64,
    #[prost(double, tag = "7")]
    pub average: f64,
    #[prost(double, tag = "8")]
    pub volume: f64,
    #[prost(double, tag = "9")]
    pub variance: f64,
    #[prost(double, tag = "10")]
    pub stddev: f64,
    #[prost(bool, tag = "11")]
    pub movement_exists: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Movements {
    #[prost(message, repeated, tag = "1")]
    pub movements: ::prost::alloc::vec::Vec<Movement>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmptyReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuccessResp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TickerFilter {
    #[prost(enumeration = "TickerType", tag = "1")]
    pub ticker_type: i32,
    #[prost(string, tag = "2")]
    pub filter: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub limit: u32,
    #[prost(uint32, tag = "4")]
    pub traded_within_past_n_days: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ticker {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub security_type: i32,
    #[prost(map = "string, string", tag = "4")]
    pub custom_fields: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BasicTicker {
    #[prost(string, tag = "1")]
    pub ticker: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub security_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeSeriesReq {
    #[prost(message, optional, tag = "1")]
    pub ticker: ::core::option::Option<BasicTicker>,
    #[prost(string, tag = "2")]
    pub from_date: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub until_date: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub intraday: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeSeriesData {
    #[prost(string, tag = "1")]
    pub date: ::prost::alloc::string::String,
    #[prost(map = "string, double", tag = "2")]
    pub values: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MovementType {
    Winner = 0,
    Loser = 1,
    Volume = 2,
    Volatility = 3,
}
impl MovementType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MovementType::Winner => "WINNER",
            MovementType::Loser => "LOSER",
            MovementType::Volume => "VOLUME",
            MovementType::Volatility => "VOLATILITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WINNER" => Some(Self::Winner),
            "LOSER" => Some(Self::Loser),
            "VOLUME" => Some(Self::Volume),
            "VOLATILITY" => Some(Self::Volatility),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Period {
    Year = 0,
    Month = 1,
    Week = 2,
    Day = 3,
    Hour = 4,
    Minute = 5,
}
impl Period {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Period::Year => "YEAR",
            Period::Month => "MONTH",
            Period::Week => "WEEK",
            Period::Day => "DAY",
            Period::Hour => "HOUR",
            Period::Minute => "MINUTE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "YEAR" => Some(Self::Year),
            "MONTH" => Some(Self::Month),
            "WEEK" => Some(Self::Week),
            "DAY" => Some(Self::Day),
            "HOUR" => Some(Self::Hour),
            "MINUTE" => Some(Self::Minute),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Active = 0,
    Deactivated = 1,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Active => "ACTIVE",
            Status::Deactivated => "DEACTIVATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTIVE" => Some(Self::Active),
            "DEACTIVATED" => Some(Self::Deactivated),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TickerType {
    Stock = 0,
    Etf = 1,
    Commodity = 2,
    Currency = 3,
    Crypto = 4,
}
impl TickerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TickerType::Stock => "STOCK",
            TickerType::Etf => "ETF",
            TickerType::Commodity => "COMMODITY",
            TickerType::Currency => "CURRENCY",
            TickerType::Crypto => "CRYPTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STOCK" => Some(Self::Stock),
            "ETF" => Some(Self::Etf),
            "COMMODITY" => Some(Self::Commodity),
            "CURRENCY" => Some(Self::Currency),
            "CRYPTO" => Some(Self::Crypto),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod data_loader_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct DataLoaderClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DataLoaderClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DataLoaderClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DataLoaderClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            DataLoaderClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_ticker_details(
            &mut self,
            request: impl tonic::IntoRequest<super::BasicTicker>,
        ) -> std::result::Result<tonic::Response<super::Ticker>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetTickerDetails",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetTickerDetails"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_tickers(
            &mut self,
            request: impl tonic::IntoRequest<super::TickerFilter>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Ticker>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetTickers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetTickers"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_security_data(
            &mut self,
            request: impl tonic::IntoRequest<super::TimeSeriesReq>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TimeSeriesData>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetSecurityData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetSecurityData"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_movement(
            &mut self,
            request: impl tonic::IntoRequest<super::MovementReq>,
        ) -> std::result::Result<tonic::Response<super::Movement>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetMovement",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetMovement"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_movements(
            &mut self,
            request: impl tonic::IntoRequest<super::MovementsReq>,
        ) -> std::result::Result<tonic::Response<super::Movements>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetMovements",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetMovements"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_correlations(
            &mut self,
            request: impl tonic::IntoRequest<super::CorrelReq>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Correl>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetCorrelations",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetCorrelations"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_correlating_tickers(
            &mut self,
            request: impl tonic::IntoRequest<super::CorrelTickersReq>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Correl>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetCorrelatingTickers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dataloader.DataLoader", "GetCorrelatingTickers"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_mutual_correlations(
            &mut self,
            request: impl tonic::IntoRequest<super::CorrelReq>,
        ) -> std::result::Result<tonic::Response<super::MutualCorrels>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetMutualCorrelations",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dataloader.DataLoader", "GetMutualCorrelations"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_latest_security_data_date(
            &mut self,
            request: impl tonic::IntoRequest<super::DateReq>,
        ) -> std::result::Result<tonic::Response<super::Date>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetLatestSecurityDataDate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dataloader.DataLoader", "GetLatestSecurityDataDate"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// portfolio procedures:
        pub async fn get_portfolios(
            &mut self,
            request: impl tonic::IntoRequest<super::PortfolioReq>,
        ) -> std::result::Result<tonic::Response<super::PortfolioMetas>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetPortfolios",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetPortfolios"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_portfolio(
            &mut self,
            request: impl tonic::IntoRequest<super::Id>,
        ) -> std::result::Result<tonic::Response<super::PortfolioMeta>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetPortfolio",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetPortfolio"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_portfolio_securities(
            &mut self,
            request: impl tonic::IntoRequest<super::Id>,
        ) -> std::result::Result<
            tonic::Response<super::PortfolioSecurities>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetPortfolioSecurities",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dataloader.DataLoader", "GetPortfolioSecurities"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_portfolio_profits(
            &mut self,
            request: impl tonic::IntoRequest<super::SecurityProfitReq>,
        ) -> std::result::Result<
            tonic::Response<super::SecurityProfits>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/GetPortfolioProfits",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "GetPortfolioProfits"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_portfolio(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePortfolioReq>,
        ) -> std::result::Result<tonic::Response<super::PortfolioMeta>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/CreatePortfolio",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "CreatePortfolio"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_portfolio(
            &mut self,
            request: impl tonic::IntoRequest<super::Id>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/DeletePortfolio",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "DeletePortfolio"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn buy_security(
            &mut self,
            request: impl tonic::IntoRequest<super::PortfolioSecurity>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/BuySecurity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "BuySecurity"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn sell_security(
            &mut self,
            request: impl tonic::IntoRequest<super::PortfolioSecurity>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/SellSecurity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("dataloader.DataLoader", "SellSecurity"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_portfolio_security(
            &mut self,
            request: impl tonic::IntoRequest<super::PortfolioSecurity>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/dataloader.DataLoader/DeletePortfolioSecurity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("dataloader.DataLoader", "DeletePortfolioSecurity"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod data_loader_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DataLoaderServer.
    #[async_trait]
    pub trait DataLoader: Send + Sync + 'static {
        async fn get_ticker_details(
            &self,
            request: tonic::Request<super::BasicTicker>,
        ) -> std::result::Result<tonic::Response<super::Ticker>, tonic::Status>;
        /// Server streaming response type for the GetTickers method.
        type GetTickersStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Ticker, tonic::Status>,
            >
            + Send
            + 'static;
        async fn get_tickers(
            &self,
            request: tonic::Request<super::TickerFilter>,
        ) -> std::result::Result<tonic::Response<Self::GetTickersStream>, tonic::Status>;
        /// Server streaming response type for the GetSecurityData method.
        type GetSecurityDataStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::TimeSeriesData, tonic::Status>,
            >
            + Send
            + 'static;
        async fn get_security_data(
            &self,
            request: tonic::Request<super::TimeSeriesReq>,
        ) -> std::result::Result<
            tonic::Response<Self::GetSecurityDataStream>,
            tonic::Status,
        >;
        async fn get_movement(
            &self,
            request: tonic::Request<super::MovementReq>,
        ) -> std::result::Result<tonic::Response<super::Movement>, tonic::Status>;
        async fn get_movements(
            &self,
            request: tonic::Request<super::MovementsReq>,
        ) -> std::result::Result<tonic::Response<super::Movements>, tonic::Status>;
        /// Server streaming response type for the GetCorrelations method.
        type GetCorrelationsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Correl, tonic::Status>,
            >
            + Send
            + 'static;
        async fn get_correlations(
            &self,
            request: tonic::Request<super::CorrelReq>,
        ) -> std::result::Result<
            tonic::Response<Self::GetCorrelationsStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the GetCorrelatingTickers method.
        type GetCorrelatingTickersStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Correl, tonic::Status>,
            >
            + Send
            + 'static;
        async fn get_correlating_tickers(
            &self,
            request: tonic::Request<super::CorrelTickersReq>,
        ) -> std::result::Result<
            tonic::Response<Self::GetCorrelatingTickersStream>,
            tonic::Status,
        >;
        async fn get_mutual_correlations(
            &self,
            request: tonic::Request<super::CorrelReq>,
        ) -> std::result::Result<tonic::Response<super::MutualCorrels>, tonic::Status>;
        async fn get_latest_security_data_date(
            &self,
            request: tonic::Request<super::DateReq>,
        ) -> std::result::Result<tonic::Response<super::Date>, tonic::Status>;
        /// portfolio procedures:
        async fn get_portfolios(
            &self,
            request: tonic::Request<super::PortfolioReq>,
        ) -> std::result::Result<tonic::Response<super::PortfolioMetas>, tonic::Status>;
        async fn get_portfolio(
            &self,
            request: tonic::Request<super::Id>,
        ) -> std::result::Result<tonic::Response<super::PortfolioMeta>, tonic::Status>;
        async fn get_portfolio_securities(
            &self,
            request: tonic::Request<super::Id>,
        ) -> std::result::Result<
            tonic::Response<super::PortfolioSecurities>,
            tonic::Status,
        >;
        async fn get_portfolio_profits(
            &self,
            request: tonic::Request<super::SecurityProfitReq>,
        ) -> std::result::Result<tonic::Response<super::SecurityProfits>, tonic::Status>;
        async fn create_portfolio(
            &self,
            request: tonic::Request<super::CreatePortfolioReq>,
        ) -> std::result::Result<tonic::Response<super::PortfolioMeta>, tonic::Status>;
        async fn delete_portfolio(
            &self,
            request: tonic::Request<super::Id>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status>;
        async fn buy_security(
            &self,
            request: tonic::Request<super::PortfolioSecurity>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status>;
        async fn sell_security(
            &self,
            request: tonic::Request<super::PortfolioSecurity>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status>;
        async fn delete_portfolio_security(
            &self,
            request: tonic::Request<super::PortfolioSecurity>,
        ) -> std::result::Result<tonic::Response<super::SuccessResp>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct DataLoaderServer<T: DataLoader> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: DataLoader> DataLoaderServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for DataLoaderServer<T>
    where
        T: DataLoader,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/dataloader.DataLoader/GetTickerDetails" => {
                    #[allow(non_camel_case_types)]
                    struct GetTickerDetailsSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::BasicTicker>
                    for GetTickerDetailsSvc<T> {
                        type Response = super::Ticker;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BasicTicker>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_ticker_details(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetTickerDetailsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetTickers" => {
                    #[allow(non_camel_case_types)]
                    struct GetTickersSvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::ServerStreamingService<super::TickerFilter>
                    for GetTickersSvc<T> {
                        type Response = super::Ticker;
                        type ResponseStream = T::GetTickersStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TickerFilter>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_tickers(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetTickersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetSecurityData" => {
                    #[allow(non_camel_case_types)]
                    struct GetSecurityDataSvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::ServerStreamingService<super::TimeSeriesReq>
                    for GetSecurityDataSvc<T> {
                        type Response = super::TimeSeriesData;
                        type ResponseStream = T::GetSecurityDataStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TimeSeriesReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_security_data(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetSecurityDataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetMovement" => {
                    #[allow(non_camel_case_types)]
                    struct GetMovementSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::MovementReq>
                    for GetMovementSvc<T> {
                        type Response = super::Movement;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MovementReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_movement(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMovementSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetMovements" => {
                    #[allow(non_camel_case_types)]
                    struct GetMovementsSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::MovementsReq>
                    for GetMovementsSvc<T> {
                        type Response = super::Movements;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MovementsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_movements(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMovementsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetCorrelations" => {
                    #[allow(non_camel_case_types)]
                    struct GetCorrelationsSvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::ServerStreamingService<super::CorrelReq>
                    for GetCorrelationsSvc<T> {
                        type Response = super::Correl;
                        type ResponseStream = T::GetCorrelationsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CorrelReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_correlations(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCorrelationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetCorrelatingTickers" => {
                    #[allow(non_camel_case_types)]
                    struct GetCorrelatingTickersSvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::ServerStreamingService<super::CorrelTickersReq>
                    for GetCorrelatingTickersSvc<T> {
                        type Response = super::Correl;
                        type ResponseStream = T::GetCorrelatingTickersStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CorrelTickersReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_correlating_tickers(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCorrelatingTickersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetMutualCorrelations" => {
                    #[allow(non_camel_case_types)]
                    struct GetMutualCorrelationsSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::CorrelReq>
                    for GetMutualCorrelationsSvc<T> {
                        type Response = super::MutualCorrels;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CorrelReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_mutual_correlations(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMutualCorrelationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetLatestSecurityDataDate" => {
                    #[allow(non_camel_case_types)]
                    struct GetLatestSecurityDataDateSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::DateReq>
                    for GetLatestSecurityDataDateSvc<T> {
                        type Response = super::Date;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DateReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_latest_security_data_date(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetLatestSecurityDataDateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetPortfolios" => {
                    #[allow(non_camel_case_types)]
                    struct GetPortfoliosSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::PortfolioReq>
                    for GetPortfoliosSvc<T> {
                        type Response = super::PortfolioMetas;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PortfolioReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_portfolios(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetPortfoliosSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetPortfolio" => {
                    #[allow(non_camel_case_types)]
                    struct GetPortfolioSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::Id>
                    for GetPortfolioSvc<T> {
                        type Response = super::PortfolioMeta;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Id>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_portfolio(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetPortfolioSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetPortfolioSecurities" => {
                    #[allow(non_camel_case_types)]
                    struct GetPortfolioSecuritiesSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::Id>
                    for GetPortfolioSecuritiesSvc<T> {
                        type Response = super::PortfolioSecurities;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Id>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_portfolio_securities(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetPortfolioSecuritiesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/GetPortfolioProfits" => {
                    #[allow(non_camel_case_types)]
                    struct GetPortfolioProfitsSvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::UnaryService<super::SecurityProfitReq>
                    for GetPortfolioProfitsSvc<T> {
                        type Response = super::SecurityProfits;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SecurityProfitReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::get_portfolio_profits(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetPortfolioProfitsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/CreatePortfolio" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePortfolioSvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::UnaryService<super::CreatePortfolioReq>
                    for CreatePortfolioSvc<T> {
                        type Response = super::PortfolioMeta;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePortfolioReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::create_portfolio(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreatePortfolioSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/DeletePortfolio" => {
                    #[allow(non_camel_case_types)]
                    struct DeletePortfolioSvc<T: DataLoader>(pub Arc<T>);
                    impl<T: DataLoader> tonic::server::UnaryService<super::Id>
                    for DeletePortfolioSvc<T> {
                        type Response = super::SuccessResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Id>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::delete_portfolio(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeletePortfolioSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/BuySecurity" => {
                    #[allow(non_camel_case_types)]
                    struct BuySecuritySvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::UnaryService<super::PortfolioSecurity>
                    for BuySecuritySvc<T> {
                        type Response = super::SuccessResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PortfolioSecurity>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::buy_security(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BuySecuritySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/SellSecurity" => {
                    #[allow(non_camel_case_types)]
                    struct SellSecuritySvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::UnaryService<super::PortfolioSecurity>
                    for SellSecuritySvc<T> {
                        type Response = super::SuccessResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PortfolioSecurity>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::sell_security(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SellSecuritySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/dataloader.DataLoader/DeletePortfolioSecurity" => {
                    #[allow(non_camel_case_types)]
                    struct DeletePortfolioSecuritySvc<T: DataLoader>(pub Arc<T>);
                    impl<
                        T: DataLoader,
                    > tonic::server::UnaryService<super::PortfolioSecurity>
                    for DeletePortfolioSecuritySvc<T> {
                        type Response = super::SuccessResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PortfolioSecurity>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DataLoader>::delete_portfolio_security(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeletePortfolioSecuritySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: DataLoader> Clone for DataLoaderServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: DataLoader> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: DataLoader> tonic::server::NamedService for DataLoaderServer<T> {
        const NAME: &'static str = "dataloader.DataLoader";
    }
}
